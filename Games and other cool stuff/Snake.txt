import random
import turtle
import time

delay = 0.1
segments = []

# Score counters
score_counter = 0
best_score_counter = 0

# Set up the screen
window = turtle.Screen()
window.title("Snake")
window.bgcolor("green")
window.setup(width=500, height=500)
window.tracer(0)

# Snake head
head = turtle.Turtle()
head.speed(0)
head.shape("square")
head.color("black")
head.penup()
head.goto(0, 0)
head.direction = "stop"

# Food
food = turtle.Turtle()
food.speed(0)
food.shape("circle")
food.color("red")
food.penup()
food.goto(0, 100)

# Sign
sign = turtle.Turtle()
sign.speed(0)
sign.color("white")
sign.penup()
sign.hideturtle()
sign.goto(0, 210)
sign.write(f"Score: 0  Best score: 0", align="center", font=("Courier", 22, "normal"))

# Functions


def go_up():
    if head.direction != "down":
        head.direction = "up"


def go_down():
    if head.direction != "up":
        head.direction = "down"


def go_left():
    if head.direction != "right":
        head.direction = "left"


def go_right():
    if head.direction != "left":
        head.direction = "right"


def move():
    if head.direction == "up":
        y_up = head.ycor()
        head.sety(y_up+20)
    if head.direction == "down":
        y_down = head.ycor()
        head.sety(y_down-20)
    if head.direction == "left":
        x_left = head.xcor()
        head.setx(x_left-20)
    if head.direction == "right":
        x_right = head.xcor()
        head.setx(x_right+20)

# Keyboard bindings


turtle.listen()
turtle.onkeypress(go_up, "w")
turtle.onkeypress(go_down, "s")
turtle.onkeypress(go_left, "a")
turtle.onkeypress(go_right, "d")

# Main game loop
while True:
    window.update()

    # Check with collisions with the boarder
    if head.xcor() > 240 or head.xcor() < -240 or head.ycor() > 240 or head.ycor() < -240:
        time.sleep(1)
        head.goto(0, 0)
        head.direction = "stop"

        # Hide the segments
        for segment in segments:
            segment.goto(1000, 1000)
        # Clear the segments list
        segments.clear()

        # Reset the current score
        score_counter = 0

    # Check for collision with the food
    if head.distance(food) < 20:
        # Move the food to a random spot
        x = random.randint(-240, 240)
        y = random.randint(-240, 240)
        food.goto(x, y)

        # Add a segment
        new_segment = turtle.Turtle()
        new_segment.speed(0)
        new_segment.shape("square")
        new_segment.color("grey")
        new_segment.penup()
        segments.append(new_segment)

        # Increase the current score
        score_counter += 1

        if score_counter > best_score_counter:
            best_score_counter = score_counter
    sign.clear()
    sign.write(f"Score: {score_counter}  \
    Best score: {best_score_counter}", align="center", font=("Courier", 22, "normal"))

    # Move the segments first in reverse order
    for i in range(len(segments)-1, 0, -1):
        x = segments[i-1].xcor()
        y = segments[i-1].ycor()
        segments[i].goto(x, y)
    # Move segment 0 to where the head is
    if len(segments) > 0:
        x = head.xcor()
        y = head.ycor()
        segments[0].goto(x, y)

    move()

    # Check with head collision with body segments
    for current_segment in segments:
        if current_segment.distance(head) < 20:
            time.sleep(1)
            head.goto(0, 0)
            head.direction = "stop"

            # Reset the current score
            score_counter = 0

            # Hide the segments
            for segment in segments:
                segment.goto(1000, 1000)
            # Clear the segments list
            segments.clear()
    time.sleep(delay)
    